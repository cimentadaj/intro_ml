pisa %>% count(CNTRYID) %>% arrange(n)
pisa
names(pisa)
matches
rlang::last_error()
split_pisa
ggplot(pisa_train, aes(math_score)) + geom_histogram()
ggplot(pisa_train, aes(math_score)) + geom_histogram(bins = 1000)
ggplot(pisa_train, aes(math_score)) + geom_histogram(bins = 500)
ncol(pisa_train)
tst
tst
tst
prepped_pisa
ridge_reg
m1
ridge$fit
ridge$fit$lambda
ridge
tune
tidymodels::tidymodels_packages()
merge
merge
methods(merge)
class(linear_reg(penalty = varying(), mixture = varying()))
ridge
merge(ridge)
tidymodels::pkg_deps()
tidymodels::tidymodels_update()
tidymodels::tag_show()
tidymodels::tag_update()
trees
mod_obj
trees()
trees() %>% range_set(c(1, 50))
sample_size()
merge
bst_grid
devtools::install_github("tidymodels/tune")
devtools::install_github("tidymodels/tune")
1
devtools::install_github("tidymodels/tune")
1
devtools::install_github("tidymodels/tune")
2
devtools::install_github("tidymodels/tune")
3
renv::install("tidymodels/tune")
s
grid_regular
tune::penalty
penalty
mixture
iono_rs
show_best
class(grid_form)
iono_rs
class(iono_rs)
bootstraps
new_rset
rsample::new_rset
rsample:::new_rset
rsample:::add_class
rsample:::print.bootstraps
rsample:::pretty
rsample:::pretty.bootstraps
class(iono_rs)
df_all
df_train_cv
tune_grid
tune_grid.recipe
tune:::tune_grid.recipe
splits
df_train_cv
une_cv
tuned_cv
?tune::finalize_workflow
pisa_recipe
grid_regular(penalty(), mixture(), levels = c(10, 10)) %>% distinct(mixture)
pisa_cv
mod1
grid_vals
tuned_mod1
rmse
yardstick:::rmse.data.frame
>foreach::foreach
?foreach::foreach
?foreach::foreach
tuned_mod1
extract_model
tuned_mod1 %>% select(.extracts)
tuned_mod1 %>% select(.extracts) %>% slice(1)
tuned_mod1 %>% select(.extracts) %>% slice(1) %>% pull9
tuned_mod1 %>% select(.extracts) %>% slice(1) %>% pull()
tuned_mod1
tuned_mod1
tuned_mod1
tuned_mod1 %>% select(.extracts)
tuned_mod1 %>% select(.extracts) %>% pull(.extracts)
tuned_mod1 %>% select(.extracts) %>% pull(.extracts) %>% .[[1]]
tuned_mod1 %>% select(.extracts) %>% pull(.extracts) %>% .[[1]] %>% select(.extracts)
tuned_mod1 %>% select(.extracts) %>% pull(.extracts) %>% .[[1]] %>% select(.extracts) %>% unnest()
tuned_mod1 %>% select(.extracts) %>% pull(.extracts) %>% .[[1]] %>% select(.extracts)
tuned_mod1 %>% select(.extracts) %>% pull(.extracts) %>% .[[1]] %>% select(.extracts) %>% slice(1)
tuned_mod1 %>% select(.extracts) %>% pull(.extracts) %>% .[[1]] %>% select(.extracts) %>% slice(1) %>% pull(.extracts)
tuned_mod1 %>% select(.extracts) %>% pull(.extracts)
tuned_mod1
?tune:::autoplot.tune_results
?tune:::autoplot
collect_metrics(tuned_mod1)
pisa_test
lm_mod
lm_mod_test
lm_mod_test
lm_mod
lm_mod$fit
rmse
rsq
r2
r2(lm_mod$fit)
r2(lm_mod_test$fit)
performance:::r2.lm
mtcars
df
df
has_role
step_center
recipe::add_step
recipe:::add_step
recipes:::add_step
recipes:::ellipse_check
recipes:::step_center_new
rlang::last_error
rlang::last_error()
rm(all_numeric)
pisa_recipe
juice(pisa_recipe)
pisa_recipe
juice(pisa_recipe)
pisa_train
juice(pisa_recipe)
pisa_recipe
pisa_recipe$var_info
pisa_recipe$var_info$variable
pisa_train %>% select(pisa_recipe$var_info$variable)
juice(pisa_recipe)
juice(pisa_recipe)
pisa_train %>% select(pisa_recipe$var_info$variable)
iris
iris
tst
tst$var_info
pisa_recipe
juice(pisa_recipe)
juice(pisa_recipe)
devtools::install_github("tidymodels/workflows")
mod1
workflow
add_Recipe
add_recipe
add_model
res
class(  workflow() %>%
  add_recipe(pisa_recipe) %>%
  add_model(lm_mod)
class(  workflow() %>%
  add_recipe(pisa_recipe) %>%
  add_model(lm_mod))
fit.workflow
parsnip:::fit.workflow
parsnip:::fit.model_spec
juice(pisa_recipe)
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice() %>% select(matches("IMMIG"))
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice() %>% count(IMMIG)
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_train %>% select(IMMIG)
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe
pisa_recipe %>% prep() %>% juice()
dplyr::mutate
pisa_recipe
pisa_recipe
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe
pisa_recipe %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep()
pisa_recipe %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice() %>% count(STUBMI)
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice() %>% pull(MISCED)
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
rlang::last_error()
pisa_recipe %>% prep() %>% juice()
pisa_recipe %>% prep() %>% juice()
library(perccalc)
install.packages("perccalc")
library(perccalc)
library(perccalc)
rlang::last_error()
library(perccalc)
perccalc::pisa_2012
as_tibble(perccalc::pisa_2012)
pisa_train
pisa_train
bake(pisa_recipe)
prep(pisa_recipe)
bake(prep(pisa_recipe))
juic(prep(pisa_recipe))
juice(prep(pisa_recipe))
juice(prep(pisa_recipe))
pisa_recipe
prep(pisa_recipe)
juice(prep(pisa_recipe))
pisa_train %>% select(REPEAT)
juice(prep(pisa_recipe))
pisa_train %>% select(REPEAT)
pisa_train %>% select(REPEAT)
juice(prep(pisa_recipe))
summary(pisa_recipe)
pisa
class(pisa$CNTRYID)
class(pisa$CNTRYID)
pisa
summary(pisa_recipe)
prep(pisa_recipe)
juice(prep(pisa_recipe))
pisa_recipe
prep(pisa_recipe)
prep(training = pisa_recipe)
prep(pisa_recipe)
pisa_train
rlang::last_error()
pisa_recipe
prep(pisa_recipe)
prep(pisa_recipe)
juice(prep(pisa_recipe))
prep(pisa_recipe)
prep(pisa_recipe)
rec
prep(impute_rec)
credit_tr
as_tibble(credit_tr)
prep(impute_rec)
pisa_recipe
prep(pisa_recipe)
prep(pisa_recipe)
juice(prep(pisa_recipe))
juice(prep(pisa_recipe, strings_as_factors = FALSE))
juice(prep(pisa_recipe, strings_as_factors = FALSE))
pisa_recipe
summary(pisa_recipe)
pisa_recipe
summary(pisa_recipe)
summary(pisa_recipe)
pisa_recipe
haven::is.labelled
s1
s2
s3
x
zap_labels(s1)
pisa
pisa_train
summary(pisa_recipe)
summary(pisa_recipe)
prep(pisa_recipe, strings_as_factors = FALSE)
juice(prep(pisa_recipe, strings_as_factors = FALSE))
prep(pisa_recipe)
options(stringsAsFactors = FALSE)
juice(prep(pisa_recipe))
prep
class(  pisa_train %>% 
  recipe(math_score ~ MISCED + FISCED + HISEI + REPEAT + IMMIG + DURECEC + BSMJ + STUBMI, data = .))
prep.recipe
recipes:::prep.recipe
options(stringsAsFactors)
options("stringsAsFactors")
?prep
tibble::tibble
pisa_recipe
juice(pisa_recipe)
pisa_recipe
res_wd
res_f
res_wf
pisa
pisa
pisa_us
pisa_us %>% select(STUBMI)
pisa_us %>% select(STUBMI) %>% count()
pisa_us %>% select(STUBMI) %>% count(STUBMI)
pisa_recipe
res_wf$fit
res_wf$fit$fit
plot(res_wf$fit$fit)
res_wf$fit$fit
res_wf$fit$fit$fit
plot(res_wf$fit$fit$fit)
tidymodels::tidymodels_packages
utils::packageDescription("tidymodels")
utils::packageDescription("tidymodels")$Imports
tidymodels::tidymodels_packages()
res_wd
res_wf
?workflows::bivariate_test
pisa_test
tidymodels::tidymodels_packages()
?caret:::train.recipe
?caret:::train
?caret::train
warnings()
penalized_mod
penalized_mod
penalized_mod
penalized_mod$bestTune
penalized_mod$finalModel
predict(penalized_mod$finalModel, pisa_test)
penalized_mod$finalModel
ridgeGrid
class(res)
pryr::object_size(res)
str(res)
?glmnet::glmnet
caret:::varImp.glmnet
code <- caret:::varImpDependencies("glmnnet")
code$VarImp
code$varImp
code
code <- caret:::varImpDependencies("glmnet")
code
caret:::varImp.glmnet
code$varImp
code$varImp
beta
caret:::varImp.glmnet
code$varImp
varImp
varImp.glmnet
caret:::varImp.glmnet
code$varImp
res
log(0.1)
class(res)
?glmnet:::plot.glmnet
glmnet:::plot
?glmnet:::plot
plot.glmnet
glmnet:::plot.glmnet
log(0)
-5 * -5
-5^2
5^2
-5^2
(-5)^2
renv::snapshot()
y
packrat::on()
?packrat::on
renv::activate()
?renv::activate()
install.packages("rmarkdown")
-0.21^2
0.1 * (-0.21^2)
0.2 * (-0.21^2)
0.3 * (-0.21^2)
200 * (-0.21^2)
scale(0.20)
scale(-20)
res
lambda
res
coefficient
coefficient^2
sum(coefficient^2)
coefficient^2
shrinked_coef
res
log(lambda)
lambda
glmnet:::plot.glmnet
plotCoef
glmnet:::plotCoef
ridgeGrid
ridgeGrid$lambda
log(ridgeGrid$lambda)
glmnet:::plotCoef
res$beta
res$lambda
glmnet:::plotCoef
glmnet:::plot.glmnet
glmnet:::plotCoef
res
res
res$lambda
log(res$lambda)
lambda
lambda
lambda
WARNINGS()
warnings()
d
d
old_vs_ridge(200, 5)
ols_vs_ridge(200, 5)
ols_vs_ridge(200, 5)
glance
ols_vs_ridge(200, 5)
ols_vs_ridge(200, 5)
library(tidymodels)
glance
library(tidymodels)
ols_vs_ridge(200, 5)
rsquare
rsquare
yardstick::rsq
warnings()
n_train <- 100
p_features <- .55
n_features
betas
n_test <- 200
lm_betas_rsq
ols_vs_ridge(100, .55)
ols_vs_ridge(200, .55)
ols_vs_ridge(500, .55)
d
  lambda_vals <- 10^seq(3, -2, by = -.1)  # Lambda values to search
lambda_vals
dim(pisa)
res
?glmnet::predict.glmnet
?glmnet
res
ridge_coef
ridge_coef
as.vector(ridge_coef)
head(pisa_train[iv_vars])
ridge_grid
devtools::install_github("tidymodels/tune")
1
1
devtools::install_github("tidymodels/tune")
1
1
devtools::install_github("tidymodels/tune")
2
devtools::install_github("tidymodels/tune")
3
install.packages("tune", repos = "http://cran.r-project.org") #or your local mirror
devtools::install_github("tidymodels/tune")
dials::penalty()
penalty() %>% value_seq(10)
penalty() %>% value_seq(10)
ridge_grid
> pisa_train["math_score", "MISCED", "FISCED","HISEI", "REPEAT", "IMMIG", "DURECEC", "BSMJ"]
> pisa_train[, "math_score", "MISCED", "FISCED","HISEI", "REPEAT", "IMMIG", "DURECEC", "BSMJ"]
pisa_train[1:5, "math_score", "MISCED", "FISCED","HISEI", "REPEAT", "IMMIG", "DURECEC", "BSMJ"]
pisa_train[1:5, c("math_score", "MISCED", "FISCED","HISEI", "REPEAT", "IMMIG", "DURECEC", "BSMJ")]
summary(pisa_train[, c("math_score", "MISCED", "FISCED","HISEI", "REPEAT", "IMMIG", "DURECEC", "BSMJ")])
options(scipen = 9999)
sample(0, 10, 200)
sample(.0, 10.0, 200, replace = TRUE)
sample(10, 200, replace = TRUE)
sample(0.0:10.0, 200, replace = TRUE)
sample(seq(0, 100, length.out = 500), 30)
ggplot
?predict.glmnet
rmse
penalized_mod
penalized_mod$results
best_lambda
